import React, { useState } from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Calendar, Clock } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

// Define a type for the appointment data returned from Supabase insert
interface AppointmentRecord {
  id: string; // UUID generated by Supabase
  client_name: string;
  client_email: string;
  service_name: string;
  preferred_datetime: string; // ISO string
  notes?: string | null;
  // Add any other fields that are selected from the 'appointments' table
}


const BookAppointment = () => {
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    clientName: '',
    clientEmail: '',
    clientPhone: '',
    serviceName: '',
    preferredDate: '', // YYYY-MM-DD
    preferredTime: '', // HH:MM
    notes: ''
  });

  // Static data for form dropdowns - could be fetched if dynamic in future
  const services = [
    'Legal Services - Immigration',
    'Legal Services - Criminal Law',
    'Legal Services - Business Law',
    'HR Services - Recruitment',
    'HR Services - Employee Relations',
    'Education Consulting - University Applications',
    'Education Consulting - Visa Assistance',
    'Business Consulting - Market Entry',
    'Business Consulting - Executive Mentorship',
    'General Consultation'
  ];

  const timeSlots = [
    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
    '12:00', '12:30', '13:00', '13:30', '14:00', '14:30',
    '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // 1. Prepare appointment data and combine date/time
      const preferredDateTime = new Date(`${formData.preferredDate}T${formData.preferredTime}:00`);
      const appointmentData = {
        client_name: formData.clientName,
        client_email: formData.clientEmail,
        client_phone: formData.clientPhone || null,
        service_name: formData.serviceName,
        preferred_datetime: preferredDateTime.toISOString(),
        notes: formData.notes || null,
        status: 'pending_confirmation' // Default status for new appointments
      };

      // 2. Insert appointment into Supabase database
      // We .select().single() to get the created record back, especially its ID.
      const { data: newAppointment, error: insertError } = await supabase
        .from('appointments')
        .insert(appointmentData)
        .select() // Select all columns of the new record
        .single<AppointmentRecord>(); // Ensure type safety for the returned object

      if (insertError || !newAppointment) {
        console.error('Error booking appointment (database insert):', insertError);
        toast({
          title: "Database Error",
          description: "There was an issue saving your appointment. Please try again. " + (insertError?.message || ""),
          variant: "destructive",
        });
        setIsSubmitting(false);
        return; // Exit if database insert fails
      }

      console.log('Appointment created in Supabase DB:', newAppointment);
      const appointmentId = newAppointment.id;

      // 3. Invoke Supabase Edge Function to create Google Calendar event
      toast({
        title: "Processing Calendar...",
        description: "Your appointment is confirmed in our system. Now creating calendar event...",
      });

      const { data: functionData, error: functionError } = await supabase.functions.invoke(
        'create-google-calendar-event', // Name of the Edge Function
        { // Payload for the Edge Function
          body: {
            appointmentId: appointmentId,
            clientName: formData.clientName,
            clientEmail: formData.clientEmail,
            serviceName: formData.serviceName,
            preferredDateTime: preferredDateTime.toISOString(), // Pass as ISO string
            notes: formData.notes,
          },
        }
      );

      // 4. Handle Edge Function response
      if (functionError) {
        console.error('Error invoking create-google-calendar-event function:', functionError);
        // Appointment is booked, but calendar event failed. Inform user appropriately.
        toast({
          title: "Appointment Booked (Calendar Issue)",
          description: `Your appointment (ID: ${appointmentId}) is booked. However, there was an issue creating the Google Calendar event. We will manually process it. Error: ${functionError.message}`,
          variant: "default", // Not "destructive" as the main booking succeeded
          duration: 12000, // Longer duration for this important, nuanced message
        });
      } else {
        // Both database insert and Edge Function call were successful
        console.log('Create-google-calendar-event function response:', functionData);
        toast({
          title: "Appointment Booked & Calendar Event Created!",
          description: "Your request has been submitted. We'll confirm your booking details via email within 24 hours. Calendar Event ID: " + (functionData?.calendarEventId || 'N/A'),
          duration: 10000,
        });
      }

      // 5. Reset form after all operations
      setFormData({
        clientName: '', clientEmail: '', clientPhone: '',
        serviceName: '', preferredDate: '', preferredTime: '', notes: ''
      });

    } catch (error: any) { // Catch any other unexpected errors during the process
      console.error('Unexpected error during booking submission process:', error);
      toast({
        title: "Unexpected Error",
        description: error.message || "An unexpected error occurred. Please try again or contact support.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false); // Ensure loading state is always reset
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // Get today's date in YYYY-MM-DD format for the 'min' attribute of date input
  const today = new Date().toISOString().split('T')[0];

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      {/* Hero Section */}
      <section className="bg-gradient-to-br from-claryon-teal/5 via-white to-gray-50 py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="font-playfair text-4xl md:text-5xl font-bold text-claryon-gray mb-6">
              Book Your Consultation
            </h1>
            <p className="text-xl text-gray-600 leading-relaxed">
              Schedule a personalized consultation with our expert team. We're here to help you achieve your goals.
            </p>
          </div>
        </div>
      </section>

      {/* Booking Form Section */}
      <section className="py-20 bg-white">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <Card className="border-0 shadow-xl"> {/* Enhanced shadow */}
            <CardHeader>
              <CardTitle className="font-playfair text-3xl text-claryon-gray text-center"> {/* Increased size */}
                Schedule Your Appointment
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-6"> {/* Added padding top */}
              <form onSubmit={handleSubmit} className="space-y-8"> {/* Increased spacing */}
                {/* Personal Information */}
                <div className="space-y-4">
                  <h3 className="font-semibold text-xl text-claryon-dark-gray border-b pb-2">Personal Information</h3> {/* Enhanced heading */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6"> {/* Increased gap */}
                    <div>
                      <Label htmlFor="clientName" className="font-medium">Full Name *</Label>
                      <Input id="clientName" type="text" value={formData.clientName} onChange={(e) => handleInputChange('clientName', e.target.value)} required className="mt-1" disabled={isSubmitting} />
                    </div>
                    <div>
                      <Label htmlFor="clientEmail" className="font-medium">Email Address *</Label>
                      <Input id="clientEmail" type="email" value={formData.clientEmail} onChange={(e) => handleInputChange('clientEmail', e.target.value)} required className="mt-1" disabled={isSubmitting} />
                    </div>
                  </div>
                  <div>
                    <Label htmlFor="clientPhone" className="font-medium">Phone Number</Label>
                    <Input id="clientPhone" type="tel" value={formData.clientPhone} onChange={(e) => handleInputChange('clientPhone', e.target.value)} className="mt-1" disabled={isSubmitting} placeholder="Optional but recommended for confirmation" />
                  </div>
                </div>

                {/* Service Selection */}
                <div className="space-y-4">
                  <h3 className="font-semibold text-xl text-claryon-dark-gray border-b pb-2">Service Details</h3>
                  <div>
                    <Label htmlFor="serviceName" className="font-medium">Service Required *</Label>
                    <Select value={formData.serviceName} onValueChange={(value) => handleInputChange('serviceName', value)} disabled={isSubmitting} required>
                      <SelectTrigger className="mt-1"><SelectValue placeholder="Select the service you need" /></SelectTrigger>
                      <SelectContent>{services.map((service) => (<SelectItem key={service} value={service}>{service}</SelectItem>))}</SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Date and Time Selection */}
                <div className="space-y-4">
                  <h3 className="font-semibold text-xl text-claryon-dark-gray border-b pb-2 flex items-center">
                    <Calendar className="h-5 w-5 mr-2 text-claryon-teal" /> Preferred Date & Time
                  </h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div>
                      <Label htmlFor="preferredDate" className="font-medium">Preferred Date *</Label>
                      <Input id="preferredDate" type="date" value={formData.preferredDate} onChange={(e) => handleInputChange('preferredDate', e.target.value)} min={today} required className="mt-1" disabled={isSubmitting} />
                    </div>
                    <div>
                      <Label htmlFor="preferredTime" className="font-medium">Preferred Time *</Label>
                      <Select value={formData.preferredTime} onValueChange={(value) => handleInputChange('preferredTime', value)} disabled={isSubmitting} required>
                        <SelectTrigger className="mt-1"><SelectValue placeholder="Select time" /></SelectTrigger>
                        <SelectContent>{timeSlots.map((time) => (<SelectItem key={time} value={time}>{time}</SelectItem>))}</SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>

                {/* Additional Notes */}
                <div>
                  <Label htmlFor="notes" className="font-medium">Additional Notes</Label>
                  <Textarea id="notes" value={formData.notes} onChange={(e) => handleInputChange('notes', e.target.value)} placeholder="Please provide any additional details about your consultation needs..." className="mt-1 min-h-[120px]" disabled={isSubmitting} />
                </div>

                {/* Important Notes Box */}
                <div className="bg-claryon-teal/10 border border-claryon-teal/30 rounded-lg p-4">
                  <div className="flex items-start">
                    <Clock className="h-5 w-5 text-claryon-teal mt-0.5 mr-3 flex-shrink-0" />
                    <div className="text-sm text-claryon-dark-gray">
                      <p className="font-semibold mb-1 text-claryon-teal">Important Notes:</p>
                      <ul className="list-disc list-inside space-y-1">
                        <li>All appointments are subject to confirmation.</li>
                        <li>We'll contact you within 24 hours to confirm your booking.</li>
                        <li>Consultations can be conducted in-person, via video call, or phone.</li>
                        <li>Please arrive 5 minutes early for in-person appointments.</li>
                      </ul>
                    </div>
                  </div>
                </div>

                <Button type="submit" className="w-full bg-claryon-teal hover:bg-claryon-dark-teal text-white text-lg py-3.5 rounded-md" disabled={isSubmitting || !formData.clientName || !formData.clientEmail || !formData.serviceName || !formData.preferredDate || !formData.preferredTime}>
                  {isSubmitting ? 'Booking Your Appointment...' : 'Book Appointment Now'}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </section>

      <Footer />
    </div>
  );
};

export default BookAppointment;
